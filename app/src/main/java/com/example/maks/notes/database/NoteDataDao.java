package com.example.maks.notes.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.maks.notes.database.NoteData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE_DATA".
*/
public class NoteDataDao extends AbstractDao<NoteData, String> {

    public static final String TABLENAME = "NOTE_DATA";

    /**
     * Properties of entity NoteData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property OwnerId = new Property(1, String.class, "ownerId", false, "OWNER_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Note_date = new Property(4, String.class, "note_date", false, "NOTE_DATE");
        public final static Property Updated = new Property(5, java.util.Date.class, "updated", false, "UPDATED");
        public final static Property Created = new Property(6, java.util.Date.class, "created", false, "CREATED");
        public final static Property Deleted = new Property(7, String.class, "deleted", false, "DELETED");
    };


    public NoteDataDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE_DATA\" (" + //
                "\"OBJECT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "\"OWNER_ID\" TEXT," + // 1: ownerId
                "\"TITLE\" TEXT NOT NULL ," + // 2: title
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"NOTE_DATE\" TEXT," + // 4: note_date
                "\"UPDATED\" INTEGER," + // 5: updated
                "\"CREATED\" INTEGER," + // 6: created
                "\"DELETED\" TEXT);"); // 7: deleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NoteData entity) {
        stmt.clearBindings();
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(1, objectId);
        }
 
        String ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindString(2, ownerId);
        }
        stmt.bindString(3, entity.getTitle());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String note_date = entity.getNote_date();
        if (note_date != null) {
            stmt.bindString(5, note_date);
        }
 
        java.util.Date updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindLong(6, updated.getTime());
        }
 
        java.util.Date created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(7, created.getTime());
        }
 
        String deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindString(8, deleted);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NoteData readEntity(Cursor cursor, int offset) {
        NoteData entity = new NoteData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ownerId
            cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // note_date
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // updated
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // created
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // deleted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NoteData entity, int offset) {
        entity.setObjectId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOwnerId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNote_date(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdated(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setCreated(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setDeleted(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(NoteData entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(NoteData entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
